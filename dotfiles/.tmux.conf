# Ref: http://manpages.ubuntu.com/manpages/eoan/en/man1/tmux.1.html
# Within a configuration file, commands may be made conditional by surrounding them with %if and %endif lines.  Additional %elif and %else lines may also be used.

# -- general -------------------------------------------------------------------
# change prefix form C-b to C-Space
unbind C-b
set -g prefix C-Space
# ensure sending T to other apps (such as vi)
bind C-Space send-prefix

# set -g prefix2 T
set -g prefix2 C-,                        # GNU-Screen compatible prefix
bind C-, send-prefix -2

# 1. Options
# use 'set', shortened for 'set-option', command to set option for tmux server and session
# use 'setw', shortened for 'set-window-option', command to set option for windows

# --------server options-------------------------
# buffer-limit number
# command-alias[] name=value

# Set the default terminal for new windows created in this session, by default, $TERM
set -g default-terminal "screen-256color"

# tmux waits after an escape is input to determine if it is part of a function or meta key sequences.
# tmux adds a very small delay when sending commands, and this delay can interfere with other programs such as the Vim text editor.
set -sg escape-time 1

# the server will exit when there are no active sessions.
# set -g exit-empty on
# the server will exit when there are no attached clients. By default, off
# set -g exit-unattached off

# set -g focus-events on
# history-file path
# message-limit number
# set-clipboard [on | external | off]
# terminal-overrides[] string

#--------session options-------------------------

# If enabled and the session is no longer attached to any clients, it is destroyed
set -g destroy-unattached off
# the client is detached when the session it is attached to is destroyed, default on
# set -g detach-on-destroy on

# Allow multiple commands to be entered without pressing the prefix-key again in the specified time milliseconds(500)
set -g repeat-time 700

# set -g set-titles off
# string used to set the window tile if set-titles is on
# set-titles-string string

set -g base-index 1
set -g renumber-windows on
# default-size XxY

# activity is annoying
# Set action on window activity when monitor-activity is on.
# activity-action [any | none | current | other]
set -g activity-action none
set -g bell-action none
set -g silence-action any
# visual for activity, bell and silence
set -g visual-activity on
set -g visual-bell off
set -g visual-silence both

# display-panes command to show the indicator
set -g display-panes-colour green
set -g display-panes-active-colour red
# Set the time for which the indicators shown by the display-panes command appear
set -g display-panes-time 2000
# the amount of time for which status line messages and other on-screen indicators are displayed
set -g display-time 3000
# message-command-style style
# message-style style

# status [off | on | 2 | 3 | 4 | 5]
set -g status on
# status-format[] format
set -g status-interval 10     # redraw status line every 10 seconds
set -g status-keys vi
set -g status-style bg=black,fg=white
set -g status-justify left
# set -g status-position bottom

set -g status-left-length 80
# set -g status-left "#[fg=yellow,bold]#(apm -l)%%#[default] [#S]"
# set -g status-left "#[fg=green]#S"
# status-left-style style
# style
# #H Hostname of local host
# #h Hostname of local host without the domain name #F Current window flag
# #I Current window index
# #P Current pane index
# #S Current session name
# #T Current window title
# #W Current window name
# ## A literal #
# #(shell-command) First line of the shell command’s output
# #[attributes] Color or attribute change


# status-right string
# status-right-length length
# status-right-style style
# status-style style

# default-command shell-command
# default-shell path
# key-table key-table
# update-environment[] variable
# user-keys[] key

# set -g assume-paste-time 1
set -g history-limit 5000                 # buffer history

# Sets the session's conception of what characters are considered word separators,
# for the purposes of the next and previous word commands in copy mode.
# The default is ‘ -_@’.  # word-separators string
# set -g word-separating ' -_@'

set -g lock-after-time 300
# Command to run when locking each client. default: lock -np
# set -g lock-command shell-command

# --------window and pane options-------------------------
setw -qg utf8 on  # tmux <2.2

set -g xterm-keys on
# Use vi or emacs-style key bindings in copy mode.
setw -g mode-keys vi
# mode-style style

# remain-on-exit [on | off]
# allow-rename [on | off]
setw -g automatic-rename on   # rename window to reflect current program
# automatic-rename-format format
# alternate-screen [on | off]

# searches will wrap around the end of the pane contents, default on
# wrap-search [on | off]

setw -g monitor-activity on
setw -g monitor-bell on
setw -g monitor-silence 0

# window-size largest | smallest | manual
# aggressive-resize [on | off]
# window-style style
# window-active-style style

# window-status
# window-status-format string
# window-status-style style
# window-status-separator string
# window-status-activity-style style
# window-status-bell-style style

# window-status-current
# window-status-current-format string
# window-status-current-style style
# window-status-last-style style

setw -g pane-base-index 1
# synchronize-panes [on | off]

# main-pane-height height
# main-pane-width width

# pane-border-format format
# pane-border-status [off | top | bottom]
# pane-border-style style

# pane-active-border-style style

# other-pane-height height
# other-pane-width width

setw -g clock-mode-colour red
setw -g clock-mode-style 24

# disable mouse support
setw -g mouse off

# 2. Key bindings
# bind [-nr] [-T key-table] key command [arguments]
# Keys are bound in a 'key table'. By default (without -T), the key is bound in the 'prefix' key Table, which is named 'prefix'.
# -T: The 'root' table is used for keys pressed without the prefix-key(default: C-b)
# -n: -n is an alias for -T root
# -r flag indicates this key may repeat, see the repeat-time option.
# Attention to the built-in table:  'root' and 'prefix'

# Bind a key to a series of commands by separating the commands with the \; character combination. For example:
# bind-key R source-file ~/.tmux.conf \; \
           # display-message "source-file done"

# ----------------------------------------------------------------------------
unbind C-r
bind C-r source-file ~/.tmux.conf \; display "Configuration reloaded!"

# edit configuration
# bind E new-window -n "~/.tmux.conf.local" "sh -c '\${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

# [a-z] except a, b, g, h, u, v and y have built-in bindings.
# a -- select alternate pane
# g --
# u --
# y --
# b -- buffers tablespace
# e -- session talbespace
# v -- window talbespace

# <prefix>t           Show the time.
bind C-m show-messages    # <prefix>~
# unbind C-z        # disable suspend tumx client

# -----session and client commands --------------------------------------------
# e stands for sEssion, <prefix>s showes choose-sessiontree
# r                 # Force redraw of the attached client.
unbind e
bind e switch-client -Ttb_session

# use command: <prefix><s>{c|r|s|f|k|d...}
bind -Ttb_session c new-session
bind -Ttb_session e choose-tree -s # <prefix>s
bind -Ttb_session l list-sessions # list-session [-F format]
bind -Ttb_session x kill-session
# rename session:
bind -Ttb_session r command-prompt -I "#{session_name}" "rename-session %%"  # <prefix>$

# manage current client
bind -Ttb_session d detach-client  # <prefix>d or <prefix>D
# switch client to other session
bind -Ttb_session s command-prompt -p "find and swtich to session" 'switch-client -t %%'

bind -Ttb_session n switch-client -n # <prefix>)    switch current client to next session
bind -Ttb_session p switch-client -p # <prefix>(    switch current client to previous session
bind -Ttb_session a switch-client -l # <prefix>L    switch current client to alternate session
# bind -Ttb_session a command-prompt -I "attach to #{client_last_session}" "attach-session -t %1"

# -----window commands --------------------------------------------
# bind w choose-tree -w # <prefix>w,  choose the current window interactively.
# bind c new-window  # <prefix>c
# bind ' rename-window  # <prefix> '
# bind & kill-window  # <prefix>&

# window navigation
bind -r n next-window       # <prefix> n
bind -r C-n next-window     # <prefix> n
# bind -r p previous-window   # <prefix> p , which is overrided by paste-buffer
bind -r C-p previous-window  # <prefix> p
bind -r C-a last-window     # <prefix> a, select last/alternate window
# bind ` select-window      # <prefix> `, prompt for a window index to select.

# using v (ventana) instead of window, don't override w
# unbind v
bind v switch-client -Ttb_window
bind -Ttb_window v choose-tree -w # <prefix>w,  choose the current window interactively.
bind -Ttb_window l list-windows
# <prefix>.           Prompt for an index to move the current window.
bind -Ttb_window r command-prompt -I "#{window_name}" "rename-window %%"  # <prefix>,
# <prefix>i           Display some information about the current window.
bind -Ttb_window X kill-window  # <prefix>&, Kill the current window.
bind -Ttb_window x confirm-before -p "kill-window #W? (y/n)" kill-window # <prefix>&


# -----pane commands --------------------------------------------
# Create a new pane by splitting target-pane:
bind | split-window -h # <prefix>%
bind - split-window -v # <prefix>"

# <prefix>!           Break the current pane out of the window.  Convert pane into a window
bind -r x kill-pane          # Kill the current pane.
bind  X kill-pane -a         # leave the current pane alone.

# quick pane selection
# <prefix> q                # show pane indexs
# todo: remap <prefix> o to -r o select-next-pane
unbind o
bind -r o select-pane -t:.+1  # next pane
bind -r O select-pane -t:.-1  # previous pane
bind -r h select-pane -L  # switch to left pane
bind -r j select-pane -D  # switch to down pane
bind -r k select-pane -U  # switch to up pane
bind -r l select-pane -R  # switch to right pane
bind -r a last-pane    # <prefxi>;  switch to last(alternate) pane
bind -r \; last-pane    # redefine <prefxi>; with -r flag  switch to last(alternate) pane

# bad: too easy to press <prefix> Space to change layout
unbind Space
# layout selection
# bind L switch-client -Ttb_layout
# bind -Ttb_layout Space next-layout                # Space
# bind -Ttb_layout 1 select-layout even-horizontal  # M-1
# bind -Ttb_layout 2 select-layout even-vertical    # M-2
# bind -Ttb_layout 3 select-layout main-horizontal  # M-3
# bind -Ttb_layout 4 select-layout even-horizontal  # M-4
# bind -Ttb_layout 5 select-layout tiled            # M-5

# swap panes
bind > swap-pane -D             # <prefix>}, swap current pane with the next one
bind < swap-pane -U             # <prefix>{, swap current pane with the previous one
# rotate panes
bind -r C-o rotate-window       # <prefix>C-o  Rotate the panes in the current window forwards
bind -r M-o rotate-window -D    # <prefix>M-o  Rotate the panes in the current window backwards.

# resize pane
#  zoom and unzoom the active pane.
bind -r z resize-pane -Z      # override <prefix>z with -r flag
bind -r H resize-pane -L 5    # <prefix>C-Left
bind -r J resize-pane -D 5    # <prefix>C-Down
bind -r K resize-pane -U 5    # <prefix>C-Up
bind -r L resize-pane -R 5    # <prefix>C-Right

# <prefix>m           Mark the current pane (see select-pane -m).
# <prefix>M           Clear the marked pane.
# The marked pane is the default for -s to join-pane, swap-pane and swap-window.

# -----buffer commands --------------------------------------------
# works like vi
# map '<prefix> Escape' to enter copy-mode, using the built-in <prefix>[ instead
bind Escape copy-mode         # <prefix>[
bind C-Escape copy-mode       # <prefix>[
# 'dUplicate' for copy-mode
bind u copy-mode              # <prefix>[
# bind PageUp copy-mode  -eu  # <prefix>PageUp, Enter copy-mode and scroll page up.

unbind p
bind  p paste-buffer             # <prefix>]

# under the copy-mode
bind  -T copy-mode-vi v send-keys -X begin-selection              # Sapce
bind  -T copy-mode-vi y send-keys -X copy-selection-and-cancel    # Enter
bind  -T copy-mode-vi Y send-keys -X copy-line

bind Y capture-pane     # Capture the contents of a pane > buffer
# history: the contents including invisble part in the current pane
bind C-l clear-history

# -----buffer and system clip commands --------------------------------------------
bind b switch-client -Ttb_buffer
bind -Ttb_buffer b choose-buffer -Z    # <prefix>=
bind -Ttb_buffer l list-buffers        # <prefix>>#
bind -Ttb_buffer d delete-buffer
bind -Ttb_buffer e command-prompt "load-buffer %%"
bind -Ttb_buffer w command-prompt "save-buffer %%"

# using system clipboard
# if-shell "uname | grep -q Darwin" \
#          "display-message 'it is mac'\; bind C-c run 'save-buffer - | pbcopy'\;  bind C-v run 'set-buffer $(pbpaste)\; paste-buffer' "   \
#          "display-message 'it is linux'\; bind C-c run 'save-buffer - | xclip -i -sel clipboard'\; bind C-v run 'set-buffer $(xclip -o -sel clipboard); paste-buffer' "

if-shell -b "uname | grep -q Darwin" \
  " \
    display-message 'it is mac' \
    bind C-c run 'tmux save-buffer - | pbcopy' \
    bind C-v run 'tmux set-buffer $(pbpaste); tmux paste-buffer' \
  " \
  " \
    display-message 'it is linux' \
    bind C-c run 'tmux save-buffer - | xclip -i -sel clipboard' \
    bind C-v run 'tmux set-buffer $(xclip -o -sel clipboard); tmux paste-buffer' \
  "

# lower version maybe needreattach-to-user-namespace
# set -g default-command "reattach-to-user-namespace -l $SHELL"
# bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
# bind C-v run "tmux set-buffer $(reattach-to-user-namespace pbpaste); tmux paste-buffer"

# keybinds defined by plugins

# 3. Hooks


# 4. local options
if '[ -f ~/.tmux.conf.local ]' 'source ~/.tmux.conf.local'

# 5. Plugins
# ---------------------------------------------------------------
set -g @plugin 'tmux-plugins/tpm'
# basic tmux setting
# set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'jimeh/tmux-themepack'
# set -g @themepack 'powerline/default/green'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# POWERLINE_TMUX=${PY_PACKS_LOC}/powerline/bindings/tmux/powerline.conf
# run-shell "powerline-daemon -q"
# source ${POWERLINE_TMUX}

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

run -b '~/.tmux/plugins/tpm/tpm'