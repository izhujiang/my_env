" profile vim's startup
" vim --startuptime /tmp/log

" Run :options, pop up the option window
"      -- get a list of options with a one-line explanation and grouped by subjuect.
"      -- navigate around and change the value of an option under the cursor.

" minimum config for vim
set nocompatible

" command				                detection	plugin		indent
" filetype plugin indent on	    on		    on		    on
filetype plugin indent on       " enable file type detection,
syntax on                       " syntax highlighting

let g:vim_home = expand('$HOME/.vim')
let g:netrw_liststyle = 3
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" set verbose = 16      " For debugging script.

" The Vim distribution comes with a few packages that you can optionally use.
"
" Extended matching with '%', makes the '%' command jump to matching HTML tags, if/else/endif in Vim scripts, etc.
" %	Cycle forward through matching groups, such as 'if', 'else', 'endif', as specified by |b:match_words|.
" g%	Cycle backwards through matching groups
" [%	Go to [count] previous unmatched group
" ]%	Go to [count] next unmatched group
" a%	In Visual mode, select the matching group,
packadd! matchit
packadd! editorconfig
" The comment package, allows to toggle comments for a single line, a range of lines or a selected text object.
" gc{motion}	to toggle comments for the selected motion
" {Visual}gc	to comment/uncomment the highlighted lines.
packadd! comment
"packadd! nohlsearch

" *****************************************************************************
" mapleader: This is a shorthand to refer to the leader key inside key mapping definitions (e.g., <Leader>).
" g:mapleader: This is the actual global variable that stores the value of mapleader. It can be used programmatically if you need to reference or manipulate the leader key setting in your Vim configuration or scripts.
if v:version >= 900
  let	g:mapleader = ','
else
  let mapleader = ','
endif
" mapping the reverse character search command to another key.
noremap <Bslash> ,
let maplocalleader = '<Space>'

" set autochdir                   " change working directories on selecting new files
set autoread                      " reload file when modified outside of vim
set autowrite                     " Write the contents of the file, if it has been modified on (1) buffer switch commands(:next), (2) 'jump' between buffers command(tag, mark, jump list), (3) ':make', (4) vim-go makes use of this option as well.
set nobackup
set noswapfile

set backspace=eol,start,indent
set clipboard^=unnamed            " enable system commands(⌘-c/x/v) dealing with 'unnamed' register
if has('unnamedplus')
  set clipboard^=unnamed,unnamedplus
endif
set cmdheight=2
set complete+=i
set completeopt=menuone      " DON'T show up extra information in popup window, a bit distracting
" set completeopt=longest,menu,preview  " DON'T use longest, which only insert the longest common text of the matches.

" set conceallevel=2
set confirm
set cursorline                    " highlight current line
set dictionary+=/usr/share/dict/words

set encoding=utf-8                " the character encoding used inside Vim (buffers, registers, expressions, viminfo, etc.)
" set fileencodings=utf-8,gbk     " charset in .editorconfig
" set fileformats=unix,mac,dos    " end_of_line in .editorconfig

set fillchars=vert:\|,fold:-,foldopen:,foldclose:,diff:-,eob:~

set foldmethod=syntax
set foldlevel=10
set foldnestmax=10

set formatoptions=jtcrqlnwmp    " How automatic formatting is done,  default: tcqj,
                                  " o -- Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
                                  " a -- Automatic formatting of paragraphs.

" The built-in :grep command runs synchronously,
"    - grep uses POSIX regular expressions
"    - ack uses Perl regular expressions
"    - ripgrep uses rust regex crate, Fast non-backtracking, Perl-compatible
if executable('rg')
" TODO: create custom :Rg commands rather than override :grep command. like :Ggrep in fugitive.vim
  set grepprg=rg\ --column\ --line-number\ --no-heading\ --smart-case
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" set helplang=cn             " help file in chinese
set hidden
set history=2000              " recall commands from history in Command-line (Ex) mode
set hlsearch
set incsearch
set ignorecase
set smartcase
set infercase
set iskeyword+=-              " treat dash-separated words as a word text object
set autoindent
set smartindent

set laststatus=2
" set lazyredraw              "only be set temporarily when performing an operation where redrawing may cause flickering or cause a slowdown.

" set list                          " show tab and space with different chars. toggle it using :set invlist
set listchars=tab:>~,space:_
set mouse=""
set nrformats=octal,hex,alpha,bin   " enable Ctrl-A/Ctrl-X to work on octal and hex numbers, as well as characters
set number
set relativenumber
" set numberwidth=4
set path+=**                        " set sub-directories will search for gf, :find command
set ruler
set scrolloff=8
" set sessionoptions=blank,buffers,curdir,folds,help,options,winsize,tabpages,slash,unix
set shiftround
" set showcmd
" set showmode
set shortmess=aT
set showmatch
set showtabline=0
if !exists('$SHELL')
    set shell=/bin/sh
endif

set sidescrolloff=8
set signcolumn=yes
set smarttab
" set spell
" set spelllang=fr    "default en
 set spelloptions+="noplainbuffer"
" setlocal spellfile+=~/.dict/spellfile/fr.utf-8.add
"
" set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
set switchbuf=uselast,useopen      " DON'T use newtab: fugitive.vim's :Gclog and Ggrep will open new buffers in the new tabs when switchbuf include newtab.
set termguicolors
set tildeop                        " tilde command '~' behaves like an operator.
set timeoutlen=700
set ttimeoutlen=100       " timeoutlen or ttimeoutlen contributes to a delay after pressing <Esc>.
set title
set titlestring=%F

" set undofile
set undolevels=2000
set updatetime=2000
" set virtualedit=block
" set viminfo='20,\"50,:20,/20,%,n~/.viminfo      " When Vim is started and the 'viminfo' option is non-empty,

set wildmenu
" set wildchar=<Tab>
" set wildcharm=<C-z>
set wildmode=list:longest,list:full
set wildignorecase
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__,*.sqlite,*.db
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif
set winminwidth=5
set nowrap                         " Don't Wrap lines (it is stupid, except raw document or markdown.)
"set whichwrap+=[,],<,>,h,l

"------------------------------------------------------------------------------
" key mapping (map commands)and abbreviations
"------------------------------------------------------------------------------
" temporarily enable for debugging vim config file
" noremap <silent> <leader>sv :source $MYVIMRC<cr>

" Disable arrowskeys and force to forget the mapping (trick)
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" -- buffers and augument list -----------------------------------
nnoremap <leader>. :lcd %:p:h<CR>
nnoremap <leader>e :e <C-R>=expand("%:p:h") . "/" <cr>
" type %% on the command-line prompt, expands to the directory of the active buffer, like :e %%, :r %%, :we %%.
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:p:h').'/' : '%%'
nnoremap <silent> <leader>w :w<cr>
nnoremap <silent> <leader>W :noautocmd w<cr>
nnoremap <silent> <Leader>x :bdelete<CR>
nnoremap <silent> <Leader>X :bwipeout<CR>

" buffer list
nnoremap ]b :bnext<cr>
nnoremap [b :bprevious<cr>
nnoremap ]B :blast<cr>
nnoremap [B :bfirst<cr>
" Switch and  edit the alternate file (builtin command).
" <C-^>/<C-6>, or :buf #<cr>
nnoremap <M-b> :buf #<cr>

" augument list
nnoremap ]a :next<cr>
nnoremap [a :previous<cr>
nnoremap ]A :last<cr>
nnoremap [A :first<cr>

" -- windows(ventana) and tab pages -----------------------------------
" window commands prefixing with CTRL-W is quite good.
nmap <silent> <leader>v <C-w>

nnoremap <silent> <leader>q :quit<cr>
tnoremap <silent> <leader>q <C-\><C-n>:quit<cr>
tnoremap <silent> <C-d> <C-\><C-n>:bdelete!<cr>
nnoremap <silent> <leader>Q :only<cr>

noremap <leader><Bar> :vsplit<cr>
noremap <leader>- :split<cr>

"navigate  windows
nnoremap <silent> <M-h> :wincmd h<CR>
nnoremap <silent> <M-j> :wincmd j<CR>
nnoremap <silent> <M-k> :wincmd k<CR>
nnoremap <silent> <M-l> :wincmd l<CR>
nnoremap <silent> <M-w> :wincmd p<CR>

inoremap <silent> <M-h> <C-\><C-N><C-w>h
inoremap <silent> <M-j> <C-\><C-N><C-w>j
inoremap <silent> <M-k> <C-\><C-N><C-w>k
inoremap <silent> <M-l> <C-\><C-N><C-w>l
inoremap <silent> <M-w> <C-\><C-N><C-w>p

tnoremap <silent> <M-h> <C-\><C-N><C-w>h
tnoremap <silent> <M-j> <C-\><C-N><C-w>j
tnoremap <silent> <M-k> <C-\><C-N><C-w>k
tnoremap <silent> <M-l> <C-\><C-N><C-w>l
tnoremap <silent> <M-w> <C-\><C-N><C-w>p

" Should disable ^<-, ^->, ^↑, ^↓ in MissionControl shortcuts (macos)
nnoremap <silent> <M-Up> :resize +2<CR>
nnoremap <silent> <M-Down> :resize -2<CR>
nnoremap <silent> <M-Left> :vertical resize -5<CR>
nnoremap <silent> <M-Right> :vertical resize +5<CR>

inoremap <silent> <M-Up> <Esc>:resize +2<CR>gi
inoremap <silent> <M-Down> <Esc>:resize -2<CR>gi
inoremap <silent> <M-Left> <Esc>:vertical resize -5<CR>gi
inoremap <silent> <M-Right> <Esc>:vertical resize +5<CR>gi

tnoremap <silent> <M-Up> <C-\><C-n>:resize +2<CR>a
tnoremap <silent> <M-Down> <C-\><C-n>:resize -2<CR>a
tnoremap <silent> <M-Left> <C-\><C-n>:vertical resize -5<CR>a
tnoremap <silent> <M-Right> <C-\><C-n>:vertical resize +5<CR>a

" Tabpage
nnoremap ]p :tabnext<cr>
nnoremap [p :tabprev<cr>
nnoremap ]P :tablast<cr>
nnoremap [P :tabfirst<cr>

" use built-in gt/gT for :tabnext/tabprev or Ex-commands directly
" OR use tmux to arrange workspaces, which is much better.
" DON'T override gt/gT for tabpage
" noremap gt :tabnext<cr>
" noremap gT :tabprev<cr>

" -- navigate and edit -----------------------------------
" tag list
" generate tags file (index of source code)
command! -nargs=0 CTagsGen execute 'silent !ctags -R --exclude=.git --fields=+l' | execute 'redraw!'
" command! -nargs=0 CTagsGen execute 'silent !ctags -R --exclude=.git' | execute 'redraw!'
nnoremap ]t :tnext<cr>
nnoremap [t :tprevious<cr>
nnoremap ]T :tlast<cr>
nnoremap [T :tfirst<cr>

" traversal through change list
" g;  -- Go to [count] older position in change list.
" g,  -- Go to [count] newer position in change list.


" diff
" ]c   -- Jump forwards to the next start of a change.
" [c   -- Jump backwards to the previous start of a change.
" do (diff obtain) for :diffget (modify the current buffer to undo difference with another buffer)
" dp (diff put) for :diffput (modify another buffer to undo difference with the current buffer)

" spell
" ]s [s ]S [S   -- spell jumps

" clean highlight, <C-l>, On macOS, used as default shortcut for sending a newline in many applications.
nnoremap <silent> <C-l> :nohlsearch<cr>
nnoremap <silent> <leader>gu :nohlsearch<CR>:diffupdate<CR>

"better move lines up/down
nnoremap <C-j> :m .+1<cr>
nnoremap <C-k> :m .-2<cr>
vnoremap <C-j> :m '>+1<cr>gv
vnoremap <C-k> :m '<-2<cr>gv
inoremap <C-j> <Esc>:m .+1<cr>gi
inoremap <C-k> <Esc>:m .-2<cr>gi

" better autoCompletion
" DON'T remap <Tab>, just keeping typing, map only when 'noinsert', or 'longest' in 'completeopt'
" inoremap <expr> <Tab> pumvisible() ? "\<C-y>" : "\<Tab>"
" DON'T overirde builtin <Esc> which switch back to Normal mode, use <c-e> directly.
" inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
" inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
" inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" CAUTION
"	Single quotes (') are for literal strings (no special key interpretation).
"	Double quotes (") allow escape sequences (like \<C-w>) to represent special key combinations or control characters.

" better indenting, DON'T overwrite default > and < in visual mode
" vnoremap < <gv
" vnoremap > >gv

" add comment below and above
nnoremap gco o<esc>Vcx<esc><cmd>normal gcc<cr>fxa<bs>
nnoremap gcO O<esc>Vcx<esc><cmd>normal gcc<cr>fxa<bs>

" better paste
" paste over visual selection
vnoremap <silent> p P
" Better paste. With P, the unnamed register not changed, v_P is repeatable.(ref :h v_p and v_P)
nnoremap <leader>p "+gP

" nnoremap find and center next
" noremap <Leader>n nzz
" noremap <Leader>N Nzz

" Next/Previous Search Result (with centering the result)
nnoremap <expr> n 'Nn'[v:searchforward] . 'zv'
xnoremap <expr> n 'Nn'[v:searchforward]
onoremap <expr> n 'Nn'[v:searchforward]
nnoremap <expr> N 'nN'[v:searchforward] . 'zv'
xnoremap <expr> N 'nN'[v:searchforward]
onoremap <expr> N 'nN'[v:searchforward]

" search for the current selection In Visual and Select mode using * and #
" same as * and # for searching the word under current cursor In normal mode.
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" Execute last substitute
" &	  Synonym for `:s` (repeat last substitute).  Note that the flags are not remembered, thus it might actually work differently.  use `:&&` to keep the flags.
" g&  Synonym for `:%s//~/&` (repeat last substitute with last search pattern on all lines with the same flags).
"
" The & command is a synonym for :s, which repeats the last substitution without remembering flags.
" Making & trigger the :&& command is more useful.  It preserves flags and therefore produces more consistent results.
nnoremap & :&&<cr>
xnoremap & :&&<cr>

" -- quickfix and location list -----------------------------------
nnoremap <silent> <M-q> :call <SID>Toggle_qf_loc_list("quickfix", 0)<cr>
nnoremap ]q :cnext<cr>
nnoremap [q :cprevious<cr>
nnoremap ]Q :clast<cr>
nnoremap [Q :cfirst<cr>

nnoremap <silent> <M-Q> :call <SID>Toggle_qf_loc_list("location", 0)<cr>
nnoremap ]l :lnext<cr>
nnoremap [l :lprevious<cr>
nnoremap ]L :llast<cr>
nnoremap [L :lfirst<cr>

" call make silently
nnoremap <leader>B :make<cr>

cnoreabbrev <expr> grep  (getcmdtype() ==# ':' && getcmdline() =~# '^grep')  ? 'silent grep': 'grep'
cnoreabbrev <expr> lgrep (getcmdtype() ==# ':' && getcmdline() =~# '^lgrep') ? 'silent lgrep' : 'lgrep'

" Qargs populates the argument list with each files name in the quickfix list (generated by :vimgrep or :make)
command! -nargs=0 -bar Qargs execute 'args ' QuickfixFilenames()

" ------------------------------------------------------------------------------
" built-in terminal emulation
if v:version >= 800
  nnoremap <silent> <M-1> :horizontal terminal<cr>
  nnoremap <silent> <M-2> :vertical terminal<cr>
endif

" " To map <Esc> to exit terminal-mode:
" tnoremap <Esc> <C-\><C-n>
" " <C-v><Esc> (Verbatim escape) send an Escape key to the program running inside the terminal buffer.
" tnoremap <C-v><Esc> <Esc>
" " To simulate |i_CTRL-R| in terminal-mode:
" tnoremap <expr> <C-R> '<C-\><C-N>"'.nr2char(getchar()).'pi'

" Toggle options ------------------------------------------------------------------------------
" Toggle background between dark and light
nnoremap <silent> <leader>ob :call ToggleBackground()<CR>
function! ToggleBackground() abort
  if &background == "dark"
    set background=light
  else
    set background=dark
  endif
endfunction

" Toggle conceallevel between 0 and 3
nnoremap <silent> <leader>oc :call ToggleConcealLevel()<CR>
function! ToggleConcealLevel() abort
  if &conceallevel == 0
    set conceallevel=3
  else
    set conceallevel=0
  endif
endfunction

nnoremap <silent> <leader>of :call ToggleFormat()<CR>
function! ToggleFormat() abort
  echo "TODO: Toggle format"
endfunction

nnoremap <silent> <leader>ol :setlocal number! <Bar> :setlocal relativenumber!<cr>
nnoremap <leader>op :setlocal paste!<cr>
nnoremap <silent> <leader>os :setlocal spell!<cr>
nnoremap <silent> <leader>ow :setlocal wrap!<cr>

" Command-line and Command Window
cnoremap <C-o> <C-f>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>

" ZZ(:x), built-in Command, svae current buffer and quit the current window, and quit in case is the last edit-window.
" same as ZZ except refuseing to abandonthe current buffer which has been edited.
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq

" misc ------------------------------------------------------------------------------
" Abbreviations are used in Insert mode, Replace mode and Command-line mode.
" -- save typing for often used long words.
" -- automatically correct obvious spelling errors.
iabbrev adn and
iabbrev waht what
iabbrev @@    m.zhujiang@gmail.com
iabbrev cc Copyright 2024 Jiang Zhu, all rights reserved.

"------------------------------------------------------------------------------
augroup event_buffer
  autocmd!

  autocmd FileType txt,markdown,gitcommit setlocal spell wrap linebreak
  autocmd FileType gitcommit,gitrebase,gitconfig set bufhidden=delete
  autocmd FileType help,qf,fugitive call s:close_with_q()

  " go to last loc when opening a buffer
  autocmd BufReadPost * call s:restore_cursor()
  autocmd BufWritePre * call s:auto_create_dir(expand("<afile>"))
augroup END

augroup event_window
  autocmd!
  autocmd QuitPre * call CloseIfLastWindow()
  " Resize splits automatically when Vim window is resized
  autocmd VimResized * tabdo wincmd =

  if v:version >= 800
      " autocmd TerminalOpen * if &buftype == 'terminal' | :startinsert | endif
      autocmd BufWinEnter,WinEnter * if &buftype == 'terminal' | silent! normal i | endif
      " autocmd BufLeave * if &buftype == 'terminal' | silent! stopinsert | endif
      " TODO:wait for WinClosed event available in coming version vim 8.2.3591
      if v:versionlong >= 8023591
        autocmd WinClosed * if &buftype == 'terminal' | bdelete! | endif
      endif
  endif
augroup END

" *****************************************************************************
" Helper Functions

" Define the function to close buffers with <q>
function! s:close_with_q()
  setlocal nobuflisted
  nnoremap <buffer> q :close<CR>
endfunction

" Quickfix
function! s:Toggle_qf_loc_list(list_type, forced)
  if a:list_type ==# "quickfix"
    if getqflist({'winid': 1}).winid != 0
      cclose
    else
      copen
    endif
  else
    if getloclist(0, {'winid': 1}).winid != 0
      lclose
    elseif !empty(getloclist(0))
      lopen
    endif
  endif
endfunction

function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

function! QuickfixFilenames()
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

" TODO: How to deal with E947: Job still running in buffer '!/bin/zsh'
function! CloseIfLastWindow()
  " Define non-essential filetypes
  " TODO: make non_essential_filetypes global, let plugins to extend it.
  let g:non_essential_filetypes = [
        \ 'help',
        \ 'qf',
        \ 'netrw',
        \ 'fugitive',
        \ ]

  " Get the current window and tabpage information
  let win_id = win_getid()
  " Popup window
  " The error “Not allowed in a popup window” occurs when certain commands or actions are attempted inside a popup window where they are restricted.
  " This is a limitation in Vim designed to prevent actions that would disrupt or conflict with the functioning of the popup window.
  if winnr() == 0
    " TODO: might NOT be right to exit terminal, close popup window and keep term_getjob running behind
    " if &buftype == 'terminal'
    "   let l:bufnr = bufnr('%')
    "   call term_sendkeys(l:bufnr, 'exit\n')
    " endif
    call popup_close(win_id)
    return
  endif

  let wins = tabpagewinnr(tabpagenr(), '$')

  " Define a function to check if a window is essential
  function! IsEssentialWin(win_id)
    let buf = winbufnr(a:win_id)
    let ft = getbufvar(buf, '&filetype')
    " Check if the filetype is not in the non-essential list
    return index(g:non_essential_filetypes, ft) == -1
  endfunction

" Filter essential windows
  let essential_wins = filter(range(1, wins), 'IsEssentialWin(v:val)')
  let win_count = len(essential_wins)

  " Close non-essential windows if only one essential window remains
  if win_count == 1 && IsEssentialWin(win_id)
    for win_num in range(wins, 1, -1)  " win_nums always be [1, wincount], so to iterate closing windows, we have to iterate from [win_count, 1]
      let cur_win_id = win_getid(win_num)
      if cur_win_id !=win_id
        exec win_num . "wincmd c"
      endif
    endfor
  endif
endfunction

" Define the function that handles directory creation
function! s:auto_create_dir(file)
  " Skip URLs (e.g. network paths like 'http://', 'ftp://', etc.)
  if a:file =~ '^\\w\\w\\+://'
    return
  endif

  " Get the real file path or use the match if the path is invalid
  let l:file_path = fnamemodify(a:file, ':p:h')
  " Create the directory path if it doesn't exist
  call mkdir(l:file_path, "p")
endfunction

" Define the function to restore the last known cursor position
function! s:restore_cursor()
  let exclude = ['gitcommit']
  if index(exclude, &filetype) >= 0
    return
  endif

  let l:mark = getpos('"')
  let lcount = line('$')
  if l:mark[1] > 0 && l:mark[1] <= lcount
    call cursor(l:mark[1], l:mark[2])
  endif
endfunction


" **** main entry *****************************************************************************
" Include complementary plugins and user's local vim config
let plugins_path = g:vim_home . '/plugins.vim'
let use_vim_only = 1

if filereadable(plugins_path)
  execute 'source ' . plugins_path
  let use_vim_only = 0
endif

let extra_path = g:vim_home . '/extra.vim'
if filereadable(extra_path)
  execute 'source ' . extra_path
endif

if use_vim_only == 1
  silent! colorscheme habamax
endif
